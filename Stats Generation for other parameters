


setwd("YOUR_DIRECTORY_HERE")
#Here you will enter the path of the folder you wish to use as your directory. This is where objects you create will be saved to. 
Example: setwd("C:/Users/JohnDoe/Desktop/Project") (Make sure you put in "")

#Necessary packages. use install.packages("package_name") to install before using library() to load the package. 
{
  library("broom")
  library("agricolae")
  library("ggplot2")
  library("magrittr")
  library("tidyr")
  library("dplyr")
  library("foreign")
  library("multcomp")
  library("multcompView")
  library("conflicted")
  library("tidyverse")
  library("ggpubr")
  library("rstatix")
  library("moments")
  library("goftest")
  library("nortest")
  
  #some packages use functions that have the same name. Here we are telling R which package to reference when we use those functions.
  conflict_prefer('filter', "dplyr")
  conflict_prefer("select", "dplyr") 
  conflict_prefer("skewness", "moments")
  conflict_prefer("rename", "dplyr")
  conflict_prefer("ad.test", "nortest")
  conflict_prefer("cvm.test", "nortest") 
}


#Load in your data and give it a name. Here we create an object named 'RawData', and tell R where to look for the .txt file we want to use. 
#Tip: You can use ./ instead of typing the full path everytime and it will default to your working directory.

RawData <- read.table(file = "./comp.BL.new.txt", header = TRUE)
RawData


#Stats Generation
{
    #Now we create our own custom function to take our RawData, manipulate it and extract statistical information.
    #Function Inputs (D = Data frame, d = depth, v = variable)
    
    Stats.gen <- function(D, d, v){
      
      Data <- D %>%
        filter(depth == d) %>%
        rename(y = v,
               Treatment = treatment_mg_ha) %>%
        mutate(depth = case_when(depth == "a" ~ "0-10 cm",
                                 depth == "b" ~ "10-20 cm"))
      
      Data$Treatment <- as.factor(Data$Treatment)

      n <- max(Data$Rep)
      
      ANOVA <- aov(y ~ Treatment + Rep, data = Data)
      summary(ANOVA)
      pval <- summary(ANOVA)[[1]][1,5]
      pval
     
      sig.func <- function(pval){
        if (pval > 0.01 & pval < 0.05) {
          print("*")
        } else if (pval > 0.001 & pval < 0.01) {
          print("**")
        } else if (pval < 0.001) {
          print("***")
        } else if (pval > 0.05) {
          print("NS")
        }
      }
         
      LSD <- LSD.test(ANOVA, trt = "Treatment", group = TRUE)
      lsd.val <- LSD$statistics$LSD
      lsd.groups <- LSD$groups
      rows <- row.names(lsd.groups)
      lsd.groups <- lsd.groups %>% 
        add_column(treatment = rows) %>%
        rename(lsd.groups = groups)
      lsd.groups <- full_join(lsd.groups, LSD$means, by = "y")
      lsd.groups <- lsd.groups %>%
        select(y, lsd.groups, treatment, Max, Min)
      
      
      
      HSD <- HSD.test(ANOVA, trt = "Treatment", group = TRUE)
      hsd.val <- HSD$statistics$MSD
      hsd.groups <- HSD$groups
      rows <- row.names(hsd.groups)
      hsd.groups <- hsd.groups %>% 
        add_column(treatment = rows) %>%
        rename(hsd.groups = groups)
      
      
      groups <- inner_join(lsd.groups, hsd.groups)
      
      
      Data <- Data %>%
        group_by(Treatment) %>%
        summarise(mean = mean(y),
                  se = sd(y)/sqrt(n)) %>%
        mutate(sig = case_when(Treatment == "0" ~ sig.func(pval))) %>%
        mutate(HSD = case_when(Treatment == "0" ~ hsd.val),
               LSD = lsd.val,
               p = case_when(Treatment == "0" ~ pval)) %>%
        add_column(variable = v,
                   depth = d) %>%
        rename(treatment = Treatment)
      
      Data <- merge(Data, groups, by="treatment")
      Data <- Data %>% 
        select(treatment, variable, depth, mean, se, Max, Min, lsd.groups, LSD, hsd.groups, HSD, p, sig)
      
      
      return(Data)
}
   
    
   #Now we create another function with two instances of the function we created previously to run stats for both soil depths.
   
    Stats.aggregate <- function(x) {
      bind_rows(
        
        if (x %in% colnames(RawData)) {
          bind_rows(
            Stats.gen(RawData, "a", x),
            Stats.gen(RawData, "b", x)
          )
        }
      )
}
    
    vars <- c("POC", "MOC", "DOC", "TOC", "bulk_density", "FC", "TC_carb_corr", "Cstock", "pH", "EC")
    
    
    run_all_stats <- lapply(vars , Stats.aggregate)
    
    all_stats <- do.call(rbind, run_all_stats)

    
    write.csv(all_stats, "./All_Stats.csv")
    
}
